version: "3"
services:

  envoy:
    image: envoyproxy/envoy:v1.27.0
    container_name: envoy
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
    ports:
      - "8000:80"  # Gateway port
      - "9901:9901" # Admin dashboard
    depends_on:
      - order-service
      - stock-service
      - payment-service
    networks:
      - mynetwork

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork

  kafka:
    image: confluentinc/cp-server:7.2.0
    ports:
      - "9093:9093"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,METRICS:PLAINTEXT'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093,METRICS://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://localhost:9093,METRICS://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
    depends_on:
      - zookeeper
    networks:
      - mynetwork

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    depends_on:
      - kafka
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MODE: "distributed"
      PORT: 9021
    ports:
      - "9021:9021"
    networks:
      - mynetwork

  init-kafka:
    image: confluentinc/cp-kafka:7.2.0
    depends_on:
      - kafka
    networks:
      - mynetwork
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --topic UpdatePayment --replication-factor 1 --partitions 4
      kafka-topics --bootstrap-server kafka:9092 --create --topic RollbackPayment --replication-factor 1 --partitions 4
      kafka-topics --bootstrap-server kafka:9092 --create --topic UpdateStock --replication-factor 1 --partitions 4

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  order-service:
    build: ./order
    image: order:latest
    environment:
      - GATEWAY_URL=http://envoy:80
    volumes:
      - "./order/logs:/order/logs"
    command: [ "bash", "./wait-for-it.sh", "kafka", "9092", "--", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5000"]
    env_file:
      - env/order_redis.env
    depends_on:
      kafka:
        condition: service_started
      order-db:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    networks:
      - mynetwork

  order-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    ports:
      - "8001:6379"
    networks:
      - mynetwork

  stock-service:
    build: ./stock
    image: stock:latest
    command: [ "bash", "./wait-for-it.sh", "kafka", "9092", "--", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5000"]
    env_file:
      - env/stock_redis.env
    depends_on:
      kafka:
        condition: service_started
      stock-db:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    networks:
      - mynetwork

  stock-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    networks:
      - mynetwork

  payment-service:
    build: ./payment
    image: payment:latest
    command: [ "bash", "./wait-for-it.sh", "kafka", "9092", "--", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5000"]
    env_file:
      - env/payment_redis.env
    depends_on:
      kafka:
        condition: service_started
      payment-db:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    networks:
      - mynetwork

  payment-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
